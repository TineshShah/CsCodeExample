* Principles:
	
DRY   - Don't repeat yourself
YAGNI - You Aren't Gonna Need It, but have as much as you can out of the box
KISS  - Keep it simple, stupid
	"Good design is as little design as possible." - Dieter Rams
	"Everything should be made as simple as possible, but not simpler."
LoD   - Law of Demeter or principle of least knowledge 
SoC   - Separation of Concerns
		layers: presentation, business(service), DAL - data access layer, DB - database
DDD   - Domain Driven Design
	Repository pattern (alowes dependency injection and unit test for EF)
		https://msdn.microsoft.com/en-us/library/ff649690.aspx
	DI - Dependecy Injection (IoC - Inversion of Control), loosely-coupled
PRG pattern - Post/Redirect/Get
GRASP - General Responsibility Assignment Software Patterns

OOP - Object Oriented Programming
SOLID (object-oriented design) (SolidInPictures)[https://lostechies.com/derickbailey/2009/02/11/solid-development-principles-in-motivational-pictures/]
S: SRP - Single Responsibility Principle (a class should have only a single responsibility)
O: OCP - Open/Closed Principle (software entities[classes, modules, functions..] should be open for extension, but closed for modification)
L: LSP - Liskov Substitution Principle (objects should be replaceable with instances of their subtypes without altering the correctness of program)
I: ISP - Interface Segregation Principle (many client-specific interfaces are better than one general-purpose interface)
D: DIP - Dependency Inversion Principle (one should 'Depend upon Abstractions'. Do not depend upon concretions, Dependency injection one method)
